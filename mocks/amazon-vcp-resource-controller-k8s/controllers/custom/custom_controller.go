// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/amazon-vpc-resource-controller-k8s/controllers/custom (interfaces: Controller)

// Package mock_custom is a generated GoMock package.
package mock_custom

import (
	gomock "github.com/golang/mock/gomock"
	cache "k8s.io/client-go/tools/cache"
	reflect "reflect"
)

// MockController is a mock of Controller interface
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// GetDataStore mocks base method
func (m *MockController) GetDataStore() cache.Indexer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataStore")
	ret0, _ := ret[0].(cache.Indexer)
	return ret0
}

// GetDataStore indicates an expected call of GetDataStore
func (mr *MockControllerMockRecorder) GetDataStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataStore", reflect.TypeOf((*MockController)(nil).GetDataStore))
}

// StartController mocks base method
func (m *MockController) StartController(arg0 cache.Indexer, arg1 chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartController", arg0, arg1)
}

// StartController indicates an expected call of StartController
func (mr *MockControllerMockRecorder) StartController(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartController", reflect.TypeOf((*MockController)(nil).StartController), arg0, arg1)
}
